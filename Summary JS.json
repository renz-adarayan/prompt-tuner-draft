{
  "summary": {
    "total_files": 10,
    "analysis_date": "2025-08-28",
    "directory": "src/assets/js",
    "description": "Comprehensive function inventory of all JavaScript files in the prompt tuner application"
  },
  "files": {
    "app.js": {
      "description": "Main application logic using Alpine.js for workflow management",
      "main_patterns": ["Alpine.js", "API integration", "workflow management"],
      "functions": {
        "alpine_functions": [
          {
            "name": "workflowApp",
            "type": "main_alpine_function",
            "description": "Main Alpine.js application data function for workflow management"
          }
        ],
        "methods_in_workflowApp": [
          {
            "name": "init",
            "description": "Initialize the application"
          },
          {
            "name": "loadWorkflows",
            "description": "Load workflows from API"
          },
          {
            "name": "formatWorkflowName",
            "description": "Format workflow name to be more readable"
          },
          {
            "name": "getWorkflowStatus",
            "description": "Determine workflow status based on API response"
          },
          {
            "name": "getPlaceholderWorkflow",
            "description": "Get a single placeholder workflow when API fails"
          },
          {
            "name": "getDefaultWorkflows",
            "description": "Default workflows to show when API is not available"
          },
          {
            "name": "openWorkflow",
            "description": "Navigate to workflow process page"
          },
          {
            "name": "openPromptManager",
            "description": "Navigate to prompt manager"
          },
          {
            "name": "openEvaluate",
            "description": "Navigate to evaluate page"
          },
          {
            "name": "getStatusBadgeClass",
            "description": "Get status badge class"
          },
          {
            "name": "formatStatus",
            "description": "Format status text"
          },
          {
            "name": "retryLoad",
            "description": "Retry loading workflows"
          }
        ],
        "utility_functions": [
          {
            "name": "utils.formatDate",
            "description": "Format date"
          },
          {
            "name": "utils.showToast",
            "description": "Show toast notification"
          },
          {
            "name": "utils.isValidUrl",
            "description": "Validate URL"
          }
        ]
      }
    },
    "array-manager.js": {
      "description": "Specialized manager for handling array operations in dynamic forms",
      "main_patterns": ["Class-based", "Array management", "Dynamic forms", "Schema resolution"],
      "functions": {
        "class_name": "ArrayManager",
        "constructor_params": ["dataManager", "schemaCache", "fieldCache"],
        "core_array_methods": [
          {
            "name": "addArrayItemByName",
            "description": "Add array item by field name (main entry point)"
          },
          {
            "name": "addArrayItem",
            "description": "Add array item with full schema resolution"
          },
          {
            "name": "generateArrayItemHtml",
            "description": "Generate HTML for array item"
          },
          {
            "name": "generateArrayItemFieldHtml",
            "description": "Generate HTML for individual array item field"
          },
          {
            "name": "removeArrayItem",
            "description": "Remove array item"
          },
          {
            "name": "addEntity",
            "description": "Add entity (main entry point for adding new entities)"
          },
          {
            "name": "generateArrayField",
            "description": "Generate array field HTML (for initial form generation)"
          },
          {
            "name": "validateArrayData",
            "description": "Validate array data"
          },
          {
            "name": "getArrayStats",
            "description": "Get array statistics"
          }
        ],
        "nested_object_methods": [
          {
            "name": "generateArrayItemNestedObjectField",
            "description": "Generate nested object field within array item"
          },
          {
            "name": "generateArrayItemNestedObjectFieldHtml",
            "description": "Generate HTML for nested object field within array item"
          },
          {
            "name": "generateArrayItemFallbackField",
            "description": "Generate fallback field for array items"
          },
          {
            "name": "updateArrayItemNestedObjectFieldData",
            "description": "Update array item nested object field data (delegates to DataManager)"
          }
        ],
        "union_field_methods": [
          {
            "name": "generateArrayItemUnionField",
            "description": "Generate union field for array items"
          },
          {
            "name": "selectArrayItemUnionOption",
            "description": "Select union option for array item"
          },
          {
            "name": "renderArrayItemUnionFields",
            "description": "Render union fields for array item"
          },
          {
            "name": "generateArrayItemUnionSchemaFields",
            "description": "Generate HTML for array item union schema fields"
          },
          {
            "name": "generateArrayItemUnionFieldHtml",
            "description": "Generate HTML for individual array item union field"
          },
          {
            "name": "updateArrayItemUnionFieldData",
            "description": "Update array item union field data (delegates to DataManager)"
          }
        ],
        "utility_methods": [
          {
            "name": "findMainArrayField",
            "description": "Find main array field in model (for entity management)"
          },
          {
            "name": "autoAddFirstArrayItems",
            "description": "Auto-add first array items for schema"
          },
          {
            "name": "fetchSchema",
            "description": "Fetch schema (delegates to main workflow)"
          },
          {
            "name": "updateArrayItemData",
            "description": "Update array item data (delegates to DataManager)"
          },
          {
            "name": "cleanDisplayName",
            "description": "Clean display name utility"
          }
        ],
        "toggle_ui_methods": [
          {
            "name": "toggleArrayItem",
            "description": "Toggle array item visibility"
          },
          {
            "name": "toggleNestedObjectField",
            "description": "Toggle nested object field visibility"
          },
          {
            "name": "toggleUnionFields",
            "description": "Toggle union fields visibility"
          },
          {
            "name": "bulkToggleArrayItems",
            "description": "Bulk toggle all array items"
          },
          {
            "name": "getToggleStates",
            "description": "Get toggle state for persistence"
          },
          {
            "name": "restoreToggleStates",
            "description": "Restore toggle states from persistence"
          }
        ],
        "nested_array_methods": [
          {
            "name": "generateNestedArrayField",
            "description": "Generate nested array field"
          },
          {
            "name": "addNestedArrayItem",
            "description": "Add nested array item"
          }
        ]
      }
    },
    "data-manager.js": {
      "description": "Centralized data management for dynamic workflow forms",
      "main_patterns": ["Class-based", "Data persistence", "Validation", "Export/Import"],
      "functions": {
        "class_name": "DataManager",
        "constructor_params": [],
        "core_data_methods": [
          {
            "name": "initializeFormData",
            "description": "Initialize form data for a schema"
          },
          {
            "name": "updateFormData",
            "description": "Update form data for a field"
          },
          {
            "name": "getFormDataForSchema",
            "description": "Get form data for a specific schema"
          },
          {
            "name": "resetFormData",
            "description": "Reset form data for a schema"
          },
          {
            "name": "clearAll",
            "description": "Clear all form data"
          }
        ],
        "nested_data_methods": [
          {
            "name": "updateNestedObjectFieldData",
            "description": "Update nested object field data"
          },
          {
            "name": "updateUnionFieldData",
            "description": "Update union field data"
          },
          {
            "name": "initializeUnionFormData",
            "description": "Initialize union form data"
          }
        ],
        "array_data_methods": [
          {
            "name": "addArrayItem",
            "description": "Add array item and return its index"
          },
          {
            "name": "updateArrayItemData",
            "description": "Update array item data"
          },
          {
            "name": "removeArrayItem",
            "description": "Remove array item"
          },
          {
            "name": "updateArrayItemNestedObjectFieldData",
            "description": "Update array item nested object field data"
          },
          {
            "name": "updateArrayItemUnionFieldData",
            "description": "Update array item union field data"
          },
          {
            "name": "initializeArrayItemUnionFormData",
            "description": "Initialize array item union form data"
          }
        ],
        "validation_export_methods": [
          {
            "name": "validateFormData",
            "description": "Validate form data"
          },
          {
            "name": "exportData",
            "description": "Export data in various formats"
          },
          {
            "name": "convertToCSV",
            "description": "Convert data to CSV format (simplified)"
          },
          {
            "name": "importData",
            "description": "Import data from external source"
          },
          {
            "name": "getDataStats",
            "description": "Get data statistics"
          }
        ],
        "storage_methods": [
          {
            "name": "saveToStorage",
            "description": "Save data to browser storage"
          },
          {
            "name": "loadFromStorage",
            "description": "Load data from browser storage"
          },
          {
            "name": "clearStorage",
            "description": "Clear storage"
          }
        ],
        "utility_methods": [
          {
            "name": "getAllFormData",
            "description": "Get all form data"
          },
          {
            "name": "setFormData",
            "description": "Set data directly (for testing or advanced use)"
          },
          {
            "name": "cloneFormData",
            "description": "Clone form data for backup"
          }
        ]
      }
    },
    "dynamic-form-generator.js": {
      "description": "Dynamic Form Generator for Backend Schema - Handles rendering forms based on API schema response",
      "main_patterns": ["Class-based", "Schema parsing", "Dynamic form generation", "Store management"],
      "functions": {
        "class_name": "DynamicFormGenerator",
        "constructor_params": [],
        "core_methods": [
          {
            "name": "initialize",
            "description": "Initialize with schema from backend API"
          },
          {
            "name": "normalizeFormName",
            "description": "Normalize form names for better display"
          },
          {
            "name": "parseBackendSchema",
            "description": "Parse the new backend API schema structure"
          },
          {
            "name": "findMainArrayProperty",
            "description": "Find the main array property in root model properties"
          },
          {
            "name": "parseAsIndividualForms",
            "description": "Parse as individual forms (fallback method)"
          },
          {
            "name": "parseDynamicStructure",
            "description": "Parse dynamic structure based on the main array property"
          }
        ],
        "extraction_methods": [
          {
            "name": "extractItemFields",
            "description": "Extract fields from item schema"
          },
          {
            "name": "findNestedArrays",
            "description": "Find nested arrays in schema"
          },
          {
            "name": "findDynamicUnions",
            "description": "Find dynamic unions (like bike types)"
          },
          {
            "name": "parseUnionOptions",
            "description": "Parse union options (like different bike types)"
          },
          {
            "name": "parseFieldDefinition",
            "description": "Parse individual field definition"
          },
          {
            "name": "parseSchemaProperties",
            "description": "Parse schema properties"
          }
        ],
        "form_generation_methods": [
          {
            "name": "getAvailableForms",
            "description": "Get all available forms"
          },
          {
            "name": "generateFormHTML",
            "description": "Generate HTML for a specific form"
          },
          {
            "name": "generateDynamicManagementHTML",
            "description": "Generate dynamic management HTML with truly dynamic structure"
          },
          {
            "name": "generateStoreManagementHTML",
            "description": "Generate store management HTML with nested structure"
          },
          {
            "name": "generateModelCard",
            "description": "Generate individual model card"
          },
          {
            "name": "generateFieldHTML",
            "description": "Generate HTML for individual field"
          }
        ],
        "store_management_methods": [
          {
            "name": "addStore",
            "description": "Add a new store to the management interface"
          },
          {
            "name": "generateStoreCardHTML",
            "description": "Generate HTML for individual store card"
          },
          {
            "name": "removeStore",
            "description": "Remove a store"
          },
          {
            "name": "addBikeSale",
            "description": "Add bike sale to a store"
          },
          {
            "name": "generateBikeSaleHTML",
            "description": "Generate bike sale HTML"
          },
          {
            "name": "removeBikeSale",
            "description": "Remove bike sale"
          },
          {
            "name": "addBikeStock",
            "description": "Add bike stock to a store"
          },
          {
            "name": "generateBikeStockHTML",
            "description": "Generate bike stock HTML"
          },
          {
            "name": "handleBikeTypeChange",
            "description": "Handle bike type change to show additional fields"
          },
          {
            "name": "removeBikeStock",
            "description": "Remove bike stock"
          }
        ],
        "dynamic_item_methods": [
          {
            "name": "addDynamicItem",
            "description": "Dynamic item management methods"
          },
          {
            "name": "generateDynamicItemHTML",
            "description": "Generate HTML for a dynamic item based on schema"
          },
          {
            "name": "generateDynamicFieldHTML",
            "description": "Generate field HTML for dynamic fields"
          },
          {
            "name": "handleDynamicUnionChange",
            "description": "Handle dynamic union changes (like bike type selection)"
          },
          {
            "name": "addNestedItem",
            "description": "Add nested item (like bike sales or bike stock)"
          },
          {
            "name": "generateNestedItemHTML",
            "description": "Generate nested item HTML"
          },
          {
            "name": "removeDynamicItem",
            "description": "Remove dynamic item"
          },
          {
            "name": "removeNestedItem",
            "description": "Remove nested item"
          }
        ],
        "input_generation_methods": [
          {
            "name": "generateTextInput",
            "description": "Generate text input"
          },
          {
            "name": "generateNumberInput",
            "description": "Generate number input"
          },
          {
            "name": "generateArrayInput",
            "description": "Generate array input (tags-like input)"
          },
          {
            "name": "generateTextareaInput",
            "description": "Generate textarea input"
          },
          {
            "name": "generateSelectInput",
            "description": "Generate select input"
          },
          {
            "name": "addArrayItem",
            "description": "Method to add array items dynamically"
          },
          {
            "name": "removeArrayItem",
            "description": "Method to remove array items"
          },
          {
            "name": "updateArrayValue",
            "description": "Update the hidden input value with array data"
          }
        ],
        "form_management_methods": [
          {
            "name": "selectForm",
            "description": "Select and add a form to the selected forms section"
          },
          {
            "name": "removeForm",
            "description": "Remove a form from selected forms"
          },
          {
            "name": "toggleFormVisibility",
            "description": "Toggle form visibility (collapse/expand)"
          },
          {
            "name": "isFormVisible",
            "description": "Check if form is currently visible"
          },
          {
            "name": "resetAllForms",
            "description": "Reset all selected forms"
          },
          {
            "name": "renderFormSelector",
            "description": "Render form selector"
          },
          {
            "name": "renderSelectedForms",
            "description": "Render currently selected forms"
          }
        ],
        "data_collection_methods": [
          {
            "name": "collectFormData",
            "description": "Collect form data"
          },
          {
            "name": "collectStoreManagementData",
            "description": "Collect store management data in the proper nested structure"
          },
          {
            "name": "collectDynamicManagementData",
            "description": "Collect dynamic management data in the proper nested structure"
          },
          {
            "name": "loadStoreManagementData",
            "description": "Load data into store management form"
          },
          {
            "name": "getAllFormsData",
            "description": "Get data from all rendered forms"
          },
          {
            "name": "getFormData",
            "description": "Get data from a specific form"
          },
          {
            "name": "getFlattenedData",
            "description": "Get flattened data from all forms (for simpler access)"
          }
        ],
        "validation_methods": [
          {
            "name": "isFieldRequired",
            "description": "Check if field is required"
          },
          {
            "name": "validateField",
            "description": "Validate individual field"
          },
          {
            "name": "validateForm",
            "description": "Validate entire form"
          },
          {
            "name": "updateCompletionBadges",
            "description": "Update completion badges for all selected forms"
          },
          {
            "name": "setInputValue",
            "description": "Helper method to set input value safely"
          },
          {
            "name": "showMessage",
            "description": "Show message"
          }
        ]
      }
    },
    "dynamic-workflow.js": {
      "description": "Main coordinator for dynamic workflow functionality - Handles schema selection, form generation, and workflow processing",
      "main_patterns": ["Class-based", "Schema management", "Workflow coordination", "Form generation"],
      "functions": {
        "class_name": "DynamicWorkflowManager",
        "constructor_params": [],
        "core_methods": [
          {
            "name": "init",
            "description": "Initialize the workflow manager and dependencies"
          },
          {
            "name": "initializeDependencies",
            "description": "Initialize dependency classes"
          },
          {
            "name": "fetchAvailableWorkflows",
            "description": "Fetch available workflows from API"
          },
          {
            "name": "createFallbackTitle",
            "description": "Create unique fallback title for workflows when schema loading fails"
          },
          {
            "name": "fetchSchema",
            "description": "Fetch schema from API with caching"
          },
          {
            "name": "selectSchema",
            "description": "Select and load a schema"
          },
          {
            "name": "loadSchemaForm",
            "description": "Load schema form and generate UI"
          }
        ],
        "form_generation_methods": [
          {
            "name": "generateFormFromSchema",
            "description": "Generate form HTML from schema"
          },
          {
            "name": "generateFieldHtml",
            "description": "Generate HTML for individual field"
          },
          {
            "name": "generateArrayField",
            "description": "Generate array field (delegate to ArrayManager)"
          },
          {
            "name": "generateNestedObjectField",
            "description": "Generate nested object field"
          },
          {
            "name": "generateNestedObjectFieldHtml",
            "description": "Generate HTML for nested object field"
          },
          {
            "name": "generateFallbackField",
            "description": "Generate fallback field"
          },
          {
            "name": "generateUnionSelectField",
            "description": "Generate union select field"
          }
        ],
        "data_management_methods": [
          {
            "name": "updateFormData",
            "description": "Update form data (delegate to DataManager)"
          },
          {
            "name": "initializeFormData",
            "description": "Initialize form data (delegate to DataManager)"
          },
          {
            "name": "resetFormData",
            "description": "Reset form data (delegate to DataManager)"
          },
          {
            "name": "getFormDataForSchema",
            "description": "Get form data for schema (delegate to DataManager with DOM fallback)"
          },
          {
            "name": "collectFormDataFromDOM",
            "description": "Collect current form data directly from DOM elements"
          },
          {
            "name": "updateNestedObjectFieldData",
            "description": "Update nested object field data (delegate to DataManager)"
          },
          {
            "name": "updateUnionFieldData",
            "description": "Update union field data (delegate to DataManager)"
          }
        ],
        "union_field_methods": [
          {
            "name": "selectUnionOption",
            "description": "Select union option"
          },
          {
            "name": "renderUnionFields",
            "description": "Render dynamic fields for selected union option"
          },
          {
            "name": "generateUnionSchemaFields",
            "description": "Generate HTML for union schema fields"
          },
          {
            "name": "generateUnionFieldHtml",
            "description": "Generate HTML for individual union field"
          },
          {
            "name": "initializeUnionFormData",
            "description": "Initialize union form data (delegate to DataManager)"
          }
        ],
        "processing_methods": [
          {
            "name": "processData",
            "description": "Process workflow data"
          },
          {
            "name": "generateSchemaResults",
            "description": "Generate schema processing results"
          },
          {
            "name": "displayResults",
            "description": "Display processing results"
          },
          {
            "name": "exportData",
            "description": "Export workflow data"
          },
          {
            "name": "downloadFile",
            "description": "Download file utility"
          },
          {
            "name": "resetAll",
            "description": "Reset all workflow data"
          }
        ],
        "toggle_methods": [
          {
            "name": "toggleNestedObjectField",
            "description": "Toggle nested object field visibility"
          },
          {
            "name": "toggleUnionFields",
            "description": "Toggle union fields visibility"
          },
          {
            "name": "bulkToggleSections",
            "description": "Bulk toggle all sections"
          }
        ],
        "utility_methods": [
          {
            "name": "autoAddFirstArrayItems",
            "description": "Auto-add first array items for required arrays"
          },
          {
            "name": "addEntity",
            "description": "Add entity (delegate to ArrayManager)"
          },
          {
            "name": "getSchemaTitle",
            "description": "Get schema title"
          },
          {
            "name": "getUnionIcon",
            "description": "Get union icon"
          },
          {
            "name": "getCurrentState",
            "description": "Get current workflow state"
          },
          {
            "name": "parseFieldNameFromId",
            "description": "Parse field name from DOM element ID"
          },
          {
            "name": "sanitizeFieldName",
            "description": "Sanitize field name from label text"
          },
          {
            "name": "extractArrayFieldName",
            "description": "Extract array field name from container element"
          },
          {
            "name": "extractArrayItemPropName",
            "description": "Extract property name from array item input ID"
          },
          {
            "name": "setNestedValue",
            "description": "Set nested value in object using dot notation"
          }
        ]
      }
    },
    "improved-dynamic-form-generator.js": {
      "description": "Improved Dynamic Form Generator following systematic approach from json_schema_to_form.md",
      "main_patterns": ["Class-based", "Schema analysis", "Reference resolution", "Bootstrap 5 forms"],
      "functions": {
        "class_name": "ImprovedDynamicFormGenerator",
        "constructor_params": [],
        "schema_analysis_methods": [
          {
            "name": "analyzeSchema",
            "description": "Analyzes the incoming schema and determines the generation strategy"
          },
          {
            "name": "detectSchemaType",
            "description": "Detect if this is a RootModel (unified) or multi-model schema"
          },
          {
            "name": "extractModels",
            "description": "Extract and catalog all models in the schema"
          },
          {
            "name": "hasArrayProperties",
            "description": "Check if a model has array properties (indicates complex form needs)"
          },
          {
            "name": "assessComplexity",
            "description": "Assess the overall complexity of the schema"
          }
        ],
        "field_analysis_methods": [
          {
            "name": "analyzeField",
            "description": "Processes each field to extract all necessary information"
          },
          {
            "name": "mapUIComponent",
            "description": "Map schema UI component to actual input type"
          },
          {
            "name": "mapInputType",
            "description": "Map to HTML input type"
          },
          {
            "name": "extractValidation",
            "description": "Extract validation rules from field definition"
          },
          {
            "name": "processArrayConfig",
            "description": "Process array configurations"
          },
          {
            "name": "processObjectConfig",
            "description": "Process object configurations and references"
          },
          {
            "name": "processEnumOptions",
            "description": "Process enum options for select fields"
          }
        ],
        "reference_resolution_methods": [
          {
            "name": "resolveReference",
            "description": "Resolve $ref references to actual schema definitions"
          },
          {
            "name": "findInDefinitions",
            "description": "Find schema in definitions sections"
          }
        ],
        "form_generation_methods": [
          {
            "name": "generateForm",
            "description": "Main form generation method"
          },
          {
            "name": "generateUnifiedForm",
            "description": "Generate unified form for RootModel schemas (like bike-insights)"
          },
          {
            "name": "generateTabbedForm",
            "description": "Generate tabbed form for complex unified schemas"
          },
          {
            "name": "generateSingleSectionForm",
            "description": "Generate simple single-section form"
          },
          {
            "name": "generateMultiModelForm",
            "description": "Generate multi-model form for separate schemas (like restaurant-recommender)"
          },
          {
            "name": "generateModelCard",
            "description": "Generate individual model card"
          }
        ],
        "field_generation_methods": [
          {
            "name": "generateModelFields",
            "description": "Generate HTML for model fields"
          },
          {
            "name": "generateFieldHTML",
            "description": "Generate HTML for individual field"
          },
          {
            "name": "generateInputField",
            "description": "Generate standard input field"
          },
          {
            "name": "generateTextareaField",
            "description": "Generate textarea field"
          },
          {
            "name": "generateSelectField",
            "description": "Generate select field"
          },
          {
            "name": "generateCheckboxField",
            "description": "Generate checkbox field"
          },
          {
            "name": "generateArrayField",
            "description": "Generate dynamic array field"
          }
        ],
        "utility_methods": [
          {
            "name": "generateValidationAttributes",
            "description": "Generate validation attributes for HTML5 validation"
          },
          {
            "name": "getFieldWrapperClass",
            "description": "Get appropriate wrapper class for field"
          },
          {
            "name": "getModelIcon",
            "description": "Get icon for model type"
          },
          {
            "name": "identifyFormSections",
            "description": "Identify form sections for tabbed interface"
          },
          {
            "name": "getSectionIcon",
            "description": "Get section icon based on field name"
          },
          {
            "name": "formatFieldName",
            "description": "Format field names to readable labels"
          },
          {
            "name": "formatEnumLabel",
            "description": "Format enum labels"
          },
          {
            "name": "validateSchemaIntegrity",
            "description": "Validate schema integrity"
          },
          {
            "name": "countTotalFields",
            "description": "Count total fields across all models"
          },
          {
            "name": "countReferences",
            "description": "Count total references in schema"
          },
          {
            "name": "camelToSnake",
            "description": "Case conversion utilities"
          },
          {
            "name": "snakeToCamel",
            "description": "Case conversion utilities"
          },
          {
            "name": "log",
            "description": "Logging utility"
          },
          {
            "name": "wrapFormWithContainer",
            "description": "Wrap generated form with container"
          },
          {
            "name": "generateErrorForm",
            "description": "Generate error form for failed schema processing"
          }
        ],
        "public_api_methods": [
          {
            "name": "initialize",
            "description": "Initialize the form generator with a schema"
          },
          {
            "name": "renderToContainer",
            "description": "Render form to a specific container"
          },
          {
            "name": "initializeDynamicBehaviors",
            "description": "Initialize dynamic behaviors for the generated form"
          },
          {
            "name": "collectFormData",
            "description": "Collect form data from generated form"
          }
        ]
      }
    },
    "llm-form-test.js": {
      "description": "LLM Form Generation Test Script for testing backend-generated forms",
      "main_patterns": ["Class-based", "API testing", "Dynamic script execution", "Form testing"],
      "functions": {
        "class_name": "LLMFormTest",
        "constructor_params": [],
        "core_methods": [
          {
            "name": "init",
            "description": "Initialize test application"
          },
          {
            "name": "bindEvents",
            "description": "Bind event handlers"
          },
          {
            "name": "setupSchemaUrls",
            "description": "Setup schema URLs and sample responses"
          },
          {
            "name": "handleSchemaChange",
            "description": "Handle schema selection changes"
          },
          {
            "name": "generateForm",
            "description": "Generate form with backend API"
          },
          {
            "name": "testWithSampleResponse",
            "description": "Test with sample response data"
          }
        ],
        "rendering_methods": [
          {
            "name": "renderGeneratedForm",
            "description": "Render the generated form from backend response"
          },
          {
            "name": "injectCSS",
            "description": "Inject generated CSS into page"
          },
          {
            "name": "executeJavaScript",
            "description": "Execute generated JavaScript safely"
          },
          {
            "name": "updateResponseInfo",
            "description": "Update response information display"
          },
          {
            "name": "clearForm",
            "description": "Clear form content"
          },
          {
            "name": "showLoading",
            "description": "Show/hide loading overlay"
          },
          {
            "name": "showError",
            "description": "Show error messages"
          }
        ]
      }
    },
    "manage-prompts.js": {
      "description": "Prompt management interface with Alpine.js for viewing, editing, and managing workflow prompts",
      "main_patterns": ["Alpine.js", "API integration", "Prompt management", "CRUD operations"],
      "functions": {
        "alpine_functions": [
          {
            "name": "managePromptsApp",
            "type": "main_alpine_function",
            "description": "Main Alpine.js application for prompt management"
          }
        ],
        "methods_in_managePromptsApp": [
          {
            "name": "init",
            "description": "Initialize the application"
          },
          {
            "name": "loadWorkflowInfo",
            "description": "Load workflow information from URL parameters or storage"
          },
          {
            "name": "formatWorkflowName",
            "description": "Format workflow name for display"
          },
          {
            "name": "loadWorkflowData",
            "description": "Load workflow data from APIs"
          },
          {
            "name": "loadPromptContent",
            "description": "Load prompt content from API"
          },
          {
            "name": "formatPromptName",
            "description": "Format filename to readable prompt name"
          },
          {
            "name": "generatePreview",
            "description": "Generate preview from prompt content"
          },
          {
            "name": "loadFallbackData",
            "description": "Fallback data when API fails or no prompts found"
          }
        ],
        "filter_display_methods": [
          {
            "name": "filterPrompts",
            "description": "Filter prompts based on selected revision"
          },
          {
            "name": "getRevisionName",
            "description": "Get revision name by ID"
          },
          {
            "name": "formatVersionText",
            "description": "Format version text to proper case"
          },
          {
            "name": "cleanPreviewText",
            "description": "Clean preview text by removing special characters and formatting"
          },
          {
            "name": "getAgentNameFromPrompt",
            "description": "Get agent name from prompt (extract from file path)"
          },
          {
            "name": "getPromptContent",
            "description": "Get full prompt content (returns actual API content with proper formatting)"
          }
        ],
        "prompt_management_methods": [
          {
            "name": "viewPrompt",
            "description": "View prompt details"
          },
          {
            "name": "editPrompt",
            "description": "Edit prompt"
          },
          {
            "name": "savePromptChanges",
            "description": "Save prompt changes"
          },
          {
            "name": "duplicatePrompt",
            "description": "Duplicate prompt"
          },
          {
            "name": "downloadPrompt",
            "description": "Download prompt"
          },
          {
            "name": "deletePrompt",
            "description": "Delete prompt"
          },
          {
            "name": "createNewPrompt",
            "description": "Create new prompt"
          }
        ],
        "editing_methods": [
          {
            "name": "formatPromptContent",
            "description": "Format prompt content"
          },
          {
            "name": "insertTemplate",
            "description": "Insert template"
          },
          {
            "name": "previewPrompt",
            "description": "Preview prompt"
          }
        ],
        "computed_properties": [
          {
            "name": "isContentValid",
            "description": "Computed property for content validation"
          }
        ]
      }
    },
    "prompt-evaluation.js": {
      "description": "Prompt evaluation interface with dynamic forms and workflow testing capabilities",
      "main_patterns": ["Alpine.js", "Dynamic forms", "API integration", "Schema management"],
      "functions": {
        "alpine_functions": [
          {
            "name": "promptEvaluationApp",
            "type": "main_alpine_function",
            "description": "Main Alpine.js application for prompt evaluation"
          }
        ],
        "helper_functions": [
          {
            "name": "generateDummyResults",
            "description": "Generate dummy evaluation results"
          },
          {
            "name": "generateAgentOutput",
            "description": "Generate agent output for different agent types"
          }
        ],
        "initialization_methods": [
          {
            "name": "init",
            "description": "Initialize the application"
          },
          {
            "name": "setupAutoSchemaReload",
            "description": "Setup automatic schema reloading when workflow changes"
          },
          {
            "name": "loadWorkflow",
            "description": "Load workflow configuration"
          },
          {
            "name": "loadRevisionsFromAPI",
            "description": "Load revisions from API"
          },
          {
            "name": "loadFallbackRevisions",
            "description": "Fallback revisions when API fails"
          }
        ],
        "form_management_methods": [
          {
            "name": "initializeInputSets",
            "description": "Initialize input sets with default values"
          },
          {
            "name": "addInputSet",
            "description": "Add new input set"
          },
          {
            "name": "removeInputSet",
            "description": "Remove input set"
          },
          {
            "name": "getInputSetSummary",
            "description": "Get summary for collapsed input set"
          }
        ],
        "version_management_methods": [
          {
            "name": "initializePromptVersion",
            "description": "Initialize prompt version"
          },
          {
            "name": "getAvailableVersions",
            "description": "Get available prompt versions for the workflow"
          },
          {
            "name": "getCurrentVersionDisplay",
            "description": "Get current version display info"
          },
          {
            "name": "selectLatestVersion",
            "description": "Select latest version"
          },
          {
            "name": "selectProductionVersion",
            "description": "Select production version"
          }
        ],
        "evaluation_methods": [
          {
            "name": "runEvaluationWithDynamicData",
            "description": "Run evaluation with dynamic form data"
          },
          {
            "name": "collectDynamicFormData",
            "description": "Collect data from all dynamic forms"
          },
          {
            "name": "runEvaluation",
            "description": "Legacy run evaluation method (kept for compatibility)"
          },
          {
            "name": "resetEvaluation",
            "description": "Reset evaluation"
          },
          {
            "name": "downloadResults",
            "description": "Download results"
          }
        ],
        "dynamic_schema_methods": [
          {
            "name": "loadDynamicSchema",
            "description": "Load dynamic schema from API"
          },
          {
            "name": "validateSchemaStructure",
            "description": "Validate schema structure to ensure it's usable"
          },
          {
            "name": "updateInputFieldsFromSchema",
            "description": "Update static input fields based on dynamic schema"
          },
          {
            "name": "extractFieldsFromProperties",
            "description": "Extract field definitions from schema properties"
          },
          {
            "name": "mapSchemaTypeToFieldType",
            "description": "Map schema types to our field types"
          },
          {
            "name": "formatFieldLabel",
            "description": "Format field names into readable labels"
          },
          {
            "name": "updateInputSetsForNewFields",
            "description": "Update existing input sets when fields change"
          },
          {
            "name": "autoLoadSchemaForWorkflow",
            "description": "Auto-load schema when workflow changes"
          },
          {
            "name": "loadSampleSchema",
            "description": "Load sample schema with complex backend API response structure"
          },
          {
            "name": "loadRealBackendSchema",
            "description": "Method to test with real backend schema format"
          },
          {
            "name": "refreshInputFieldsFromSchema",
            "description": "Manually refresh input fields from current schema"
          },
          {
            "name": "getSchemaStatus",
            "description": "Get schema loading status for UI"
          }
        ],
        "validation_utility_methods": [
          {
            "name": "isFormValid",
            "description": "Validate form inputs"
          },
          {
            "name": "formatWorkflowOutput",
            "description": "Format workflow output for display"
          },
          {
            "name": "getStatusBadgeClass",
            "description": "Get status badge class"
          },
          {
            "name": "getStatusText",
            "description": "Get status text"
          },
          {
            "name": "getAgentStatusClass",
            "description": "Get agent status class"
          },
          {
            "name": "getAgentDescription",
            "description": "Get agent description from workflow config"
          },
          {
            "name": "copyAgentOutput",
            "description": "Copy agent output to clipboard"
          }
        ]
      }
    },
    "workflow-process.js": {
      "description": "Workflow process page with Alpine.js for displaying workflow details and managing workflow execution",
      "main_patterns": ["Alpine.js", "API integration", "Workflow management", "Agent display"],
      "functions": {
        "alpine_functions": [
          {
            "name": "workflowProcessApp",
            "type": "main_alpine_function",
            "description": "Main Alpine.js application for workflow process page"
          }
        ],
        "methods_in_workflowProcessApp": [
          {
            "name": "init",
            "description": "Initialize the application"
          },
          {
            "name": "getWorkflowIdFromUrl",
            "description": "Get workflow ID from URL parameters"
          },
          {
            "name": "loadWorkflowDetails",
            "description": "Load workflow details"
          },
          {
            "name": "getWorkflowInfo",
            "description": "Get workflow info from the workflows API (same as used in workflow hub)"
          },
          {
            "name": "loadWorkflowAgents",
            "description": "Load workflow agents from API"
          },
          {
            "name": "getStatusBadgeClass",
            "description": "Get status badge class"
          },
          {
            "name": "formatStatus",
            "description": "Format status text"
          },
          {
            "name": "runEvaluation",
            "description": "Run evaluation"
          },
          {
            "name": "simulateWorkflowExecution",
            "description": "Simulate workflow execution with progress"
          },
          {
            "name": "managePrompts",
            "description": "Manage prompts"
          }
        ]
      }
    }
  }
}
